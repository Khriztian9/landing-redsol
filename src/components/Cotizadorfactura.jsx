import React, { useState, useEffect } from "react";
import axios from "axios";
import "bootstrap/dist/css/bootstrap.min.css";
import AOS from "aos";
import "aos/dist/aos.css";
import "./CotizadorFactura.css";

// Firebase
import { db, auth } from "../firebase";
import { collection, addDoc, serverTimestamp } from "firebase/firestore";

// PDF
import jsPDF from "jspdf";
import autoTable from "jspdf-autotable";

const CotizadorFactura = () => {
  const [file, setFile] = useState(null);
  const [estructura, setEstructura] = useState("trapezoidal");
  const [cubierta, setCubierta] = useState("fibrocemento");
  const [ubicacion, setUbicacion] = useState("risaralda");
  const [tipoInversor, setTipoInversor] = useState("ongrid");
  const [porcentajeGeneracion, setPorcentajeGeneracion] = useState(100); // NUEVO
  const [resultado, setResultado] = useState(null);
  const [error, setError] = useState(null);
  const [loading, setLoading] = useState(false);

  // === NUEVO: modo Factura/Datos y formulario manual ===
  const [modo, setModo] = useState("factura"); // "factura" | "datos"
  const [manual, setManual] = useState({
    nombre: "",
    direccion: "",
    municipio: "",
    estrato: "1",
    tipo_servicio: "Residencial",
    consumo_kwh: "",
    valor_kwh: "" // tarifa base SIN contribuci√≥n
  });
  const esResidencial = manual.tipo_servicio === "Residencial";
  useEffect(() => {
    if (!esResidencial) setManual(prev => ({ ...prev, estrato: "" }));
  }, [esResidencial]);
  const handleManualChange = (e) => {
    const { name, value } = e.target;
    setManual(prev => ({ ...prev, [name]: value }));
  };

  useEffect(() => {
    AOS.init({ duration: 1000 });
  }, []);

  // Validaci√≥n archivo PDF
  const handleFileChange = (e) => {
    const selectedFile = e.target.files[0];
    if (selectedFile && selectedFile.type !== "application/pdf") {
      setError("El archivo debe ser un PDF.");
      setFile(null);
      return;
    }
    if (selectedFile && selectedFile.size > 5 * 1024 * 1024) {
      setError("El archivo no debe superar los 5MB.");
      setFile(null);
      return;
    }
    setError(null);
    setFile(selectedFile);
  };

  const getUserIP = async () => {
    try {
      const res = await fetch("https://api64.ipify.org?format=json");
      const data = await res.json();
      return data.ip;
    } catch {
      return "IP no disponible";
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    setResultado(null);
    setError(null);

    try {
      let res;
      if (modo === "factura") {
        const formData = new FormData();
        formData.append("file", file);
        formData.append("estructura", estructura);
        formData.append("cubierta", cubierta);
        formData.append("ubicacion", ubicacion);
        formData.append("tipoInversor", tipoInversor);
        formData.append("porcentajeGeneracion", porcentajeGeneracion);
        res = await axios.post("https://cash-48v3.onrender.com/procesar-factura", formData);
      } else {
        const payload = {
          nombre: manual.nombre || "No disponible",
          direccion: manual.direccion || "No disponible",
          municipio: manual.municipio || "No disponible",
          estrato: manual.estrato || "0",
          tipo_servicio: manual.tipo_servicio || "Residencial",
          consumo_kwh: Number(manual.consumo_kwh || 0),
          valor_kwh: manual.valor_kwh ? Number(manual.valor_kwh) : null,
          estructura,
          cubierta,
          ubicacion,
          tipoInversor,
          porcentajeGeneracion
        };
        res = await axios.post("https://cash-48v3.onrender.com/procesar-datos", payload);
      }

      if (!res?.data) throw new Error("El servidor no devolvi√≥ resultados");
      setResultado(res.data);

      if (auth.currentUser) {
        const userIp = await getUserIP();
        await addDoc(collection(db, "cotizaciones"), {
          userId: auth.currentUser.uid,
          email: auth.currentUser.email,
          ...res.data,
          estructura,
          cubierta,
          ubicacion,
          tipoInversor,
          porcentajeGeneracion,
          modo,
          ip: userIp,
          fecha: serverTimestamp(),
        });
      }
    } catch (err) {
      console.error("‚ùå Error en CotizadorFactura:", err);
      setError("No se pudo procesar la solicitud. Verifica la informaci√≥n e int√©ntalo nuevamente.");
      setResultado(null);
    } finally {
      setLoading(false);
    }
  };

  // üîπ Exportar PDF (IGUAL QUE TU VERSI√ìN ACTUAL)
  const exportarPDF = () => {
  if (!resultado) return;

  const doc = new jsPDF({ unit: "mm", format: "a4", orientation: "landscape" });

  const COMPANY = {
    name: "REDSOL COLOMBIA S.A.S.",
    phone: "+57 318 346 4183",
    email: "info@redsolcolombia.com",
    website: "www.redsolcolombia.com",
    address: "Av. Las Am√©ricas #50-03, Pereira, Risaralda",
    slogan: "Energ√≠a solar a tu alcance",
  };

  const COLORS = {
    primary: [13, 110, 253],
    accent: [32, 201, 151],
    dark: [33, 37, 41],
    gray: [108, 117, 125],
  };

  const fecha = new Date().toLocaleDateString("es-CO", {
    year: "numeric",
    month: "long",
    day: "2-digit",
  });

  const formatCOP = (n) =>
    (n ?? 0).toLocaleString("es-CO", {
      style: "currency",
      currency: "COP",
      minimumFractionDigits: 0,
    });

  const banner = new Image();
  banner.src = "/solar-bg.jpg";

  banner.onload = () => {
    doc.setFillColor(...COLORS.primary);
    doc.rect(0, 0, 297, 22, "F");
    doc.setTextColor(255);
    doc.setFontSize(14);
    doc.setFont("helvetica", "bold");
    doc.text(COMPANY.name, 12, 14);

    doc.addImage(banner, "JPEG", 0, 22, 297, 100);

    doc.setTextColor(...COLORS.dark);
    doc.setFontSize(22);
    doc.text("Propuesta T√©cnico‚ÄìEcon√≥mica", 15, 140);
    doc.setFontSize(14);
    doc.setTextColor(...COLORS.gray);
    doc.text(COMPANY.slogan, 15, 150);

    doc.setFontSize(11);
    doc.setTextColor(...COLORS.dark);
    doc.text(`Cliente: ${resultado.nombre || "N/D"}`, 15, 170);
    doc.text(`Fecha: ${fecha}`, 15, 178);
    doc.text(`Asesor: ${auth?.currentUser?.email || "‚Äî"}`, 15, 186);

    // P√°gina 2
    doc.addPage("a4", "landscape");
    doc.setFillColor(...COLORS.primary);
    doc.rect(0, 0, 297, 12, "F");
    doc.setTextColor(255);
    doc.setFontSize(11);
    doc.text("Cotizaci√≥n Solar FV", 12, 8);

    doc.setTextColor(...COLORS.dark);
    doc.setFont("helvetica", "bold");

    doc.setFontSize(13);
    doc.setTextColor(...COLORS.dark);
    doc.text("Datos del Cliente", 15, 22);
    autoTable(doc, {
      startY: 28,
      margin: { left: 15, right: 15 },
      tableWidth: "auto",
      theme: "grid",
      headStyles: { fillColor: COLORS.primary, textColor: 255, fontStyle: "bold" },
      styles: { fontSize: 9, cellPadding: 3, fillColor: [250, 250, 250] },
      alternateRowStyles: { fillColor: [245, 245, 245] },
      head: [["Campo", "Valor"]],
      body: [
        ["Nombre", resultado.nombre || "N/D"],
        ["Direcci√≥n", resultado.direccion || "N/D"],
        ["Municipio", resultado.municipio || "N/D"],
        ["Estrato", resultado.estrato || "N/D"],
        ["Tipo servicio", resultado.tipo_servicio || "N/D"],
      ],
    });

    doc.text("Resultados T√©cnicos", 15, doc.lastAutoTable.finalY + 15);
    doc.setTextColor(...COLORS.dark);
    autoTable(doc, {
      startY: doc.lastAutoTable.finalY + 20,
      margin: { left: 15, right: 15 },
      tableWidth: "auto",
      theme: "grid",
      headStyles: { fillColor: COLORS.primary, textColor: 255, fontStyle: "bold" },
      styles: { fontSize: 9, cellPadding: 3, fillColor: [250, 250, 250] },
      alternateRowStyles: { fillColor: [245, 245, 245] },
      head: [["Par√°metro", "Valor"]],
      body: [
        ["Consumo mensual", `${resultado.consumo_kwh} kWh`],
        ["Potencia requerida", `${resultado.potencia_kwp} kWp`],
        ["N√∫mero de paneles", `${resultado.numero_paneles}`],
        ["Inversor", `${resultado.inversor_utilizado}`],
        [
          "Generaci√≥n mensual",
          `${resultado.generacion_mensual_min.toFixed(2)} - ${resultado.generacion_mensual_max.toFixed(2)} kWh`,
        ],
        ["Porcentaje de cobertura", `${resultado.porcentaje_generacion ?? porcentajeGeneracion}%`],
      ],
    });

    // P√°gina 3
    doc.addPage("a4", "landscape");
    doc.setTextColor(...COLORS.dark);
    doc.setFontSize(14);
    doc.text("Inversi√≥n", 15, 15);

    autoTable(doc, {
      startY: 25,
      margin: { left: 15, right: 15 },
      tableWidth: "auto",
      theme: "grid",
      headStyles: { fillColor: COLORS.primary, textColor: 255 },
      styles: { fontSize: 9, cellPadding: 3 },
      head: [["Concepto", "Valor"]],
      body: [
        ["Precio estimado del sistema", formatCOP(resultado.precio_total)],
        ["Costo energ√≠a anual (referencial)", formatCOP(resultado.costo_energia)],
      ],
    });

    doc.setFontSize(14);
    doc.text("Condiciones del Proyecto", 15, doc.lastAutoTable.finalY + 10);
    doc.setTextColor(...COLORS.dark);

    autoTable(doc, {
      startY: doc.lastAutoTable.finalY + 14,
      margin: { left: 15, right: 15 },
      tableWidth: "auto",
      theme: "grid",
      headStyles: { fillColor: COLORS.primary, textColor: 255 },
      styles: { fontSize: 9, cellPadding: 3 },
      head: [["Par√°metro", "Valor"]],
      body: [
        ["Estructura", estructura],
        ["Cubierta", cubierta],
        ["Ubicaci√≥n", ubicacion],
        ["Tipo inversor", tipoInversor],
      ],
    });

    doc.setFontSize(9).setTextColor(71, 75, 78);
    let textoNaturaleza = `
1. Naturaleza de la propuesta
La presente presentaci√≥n constituye un estudio preliminar de potencial fotovoltaico desarrollado a partir de la informaci√≥n p√∫blica y datos de referencia t√©cnica. No
corresponde a una oferta comercial vinculante, ni a una cotizaci√≥n formal, factura proforma o contrato.
2. Valores estimados
Todos los valores expresados en esta propuesta son simulados y referenciales, calculados con base en precios promedio del mercado y condiciones t√©cnicas generales.
Pueden variar dependiendo de factores como: condiciones reales del sitio, an√°lisis estructural, disponibilidad de red, especificaciones t√©cnicas del operador de red (OR),
entre otros.
3. Generaci√≥n estimada
La promesa de generaci√≥n energ√©tica es una proyecci√≥n basada en herramientas de simulaci√≥n est√°ndar. La cifra de GENERACI√ìN kWh/a√±o es estimativa y puede variar
dependiendo del comportamiento clim√°tico, mantenimientos, orientaci√≥n del sistema y sombreados.
4. Obtenci√≥n de una oferta comercial
Para acceder a una oferta formal, con cotizaci√≥n detallada, factura proforma o propuesta comercial vinculante, se requiere LA FIRMA DEL CONTRATO DE MANDATO PARA
ADELANTAR LOS TR√ÅMITES Y ESTUDIOS NECESARIOS ADEM√ÅS DE UNA VISITA DE INSPECCI√ìN AL SITIO.
5. Limitaci√≥n de responsabilidad
RED SOL no asume responsabilidad por decisiones que el cliente tome con base en esta propuesta preliminar. Toda decisi√≥n de inversi√≥n deber√° tomarse con base en la
oferta formal y posterior firma de contrato.
`;
    let splitText = doc.splitTextToSize(textoNaturaleza, 260);
    doc.text(splitText, 15, doc.lastAutoTable.finalY + 5);

    const pageCount = doc.internal.getNumberOfPages();
    for (let i = 1; i <= pageCount; i++) {
      doc.setPage(i);
      doc.setFontSize(9);
      doc.setTextColor(150);
      doc.text(
        `${COMPANY.website} ¬∑ ${COMPANY.email} ¬∑ ${COMPANY.phone}`,
        148,
        200,
        { align: "center" }
      );
      doc.text(`P√°gina ${i} de ${pageCount}`, 280, 200, { align: "right" });
    }

    doc.save(`Cotizacion_${resultado.nombre || "cliente"}.pdf`);
  };

  // Si la imagen falla ‚Üí genera sin banner
  banner.onerror = () => {
    console.warn("‚ö†Ô∏è No se pudo cargar el banner, generando PDF sin imagen.");
    doc.save(`Cotizacion_${resultado.nombre || "cliente"}.pdf`);
  };
};

  return (
    <div className="container py-4">
      <h2 className="mb-4 text-center text-primary" data-aos="fade-down">
        Cotizador Solar 
      </h2>

      {/* Toggle Factura/Datos */}
      <div className="toggle-cotizador btn-group w-100 mb-3" role="group" aria-label="Modo de cotizaci√≥n">
        <input
          type="radio"
          className="btn-check"
          name="modo"
          id="btnFactura"
          autoComplete="off"
          checked={modo === "factura"}
          onChange={() => setModo("factura")}
        />
        <label className={`btn btn-outline-primary ${modo === "factura" ? "active" : ""}`} htmlFor="btnFactura">
          Factura
        </label>
        <input
          type="radio"
          className="btn-check"
          name="modo"
          id="btnDatos"
          autoComplete="off"
          checked={modo === "datos"}
          onChange={() => setModo("datos")}
        />
        <label className={`btn btn-outline-primary ${modo === "datos" ? "active" : ""}`} htmlFor="btnDatos">
          Datos
        </label>
      </div>

      <form onSubmit={handleSubmit} className="card p-4 shadow mb-4" data-aos="fade-up">
{modo === "factura" ? (
  <div className="mb-3">
    <label className="form-label">Factura en PDF</label>
    <input
      type="file"
      accept="application/pdf"
      onChange={handleFileChange}
      className="form-control"
      required={modo === "factura"}
    />
  </div>
) : (
  <>
    <div className="row">
      <div className="col-md-6 mb-3">
        <label className="form-label">Nombre</label>
        <input className="form-control" name="nombre" value={manual.nombre} onChange={handleManualChange} />
      </div>
      <div className="col-md-6 mb-3">
        <label className="form-label">Direcci√≥n</label>
        <input className="form-control" name="direccion" value={manual.direccion} onChange={handleManualChange} />
      </div>
      <div className="col-md-4 mb-3">
        <label className="form-label">Municipio</label>
        <input className="form-control" name="municipio" value={manual.municipio} onChange={handleManualChange} />
      </div>
      <div className="col-md-4 mb-3">
        <label className="form-label">Tipo de servicio</label>
        <select
          className="form-select"
          name="tipo_servicio"
          value={manual.tipo_servicio}
          onChange={handleManualChange}
          required={modo === "datos"}
        >
          <option>Residencial</option>
          <option>Comercial</option>
          <option>Industrial</option>
        </select>
      </div>
      {esResidencial && (
        <div className="col-md-4 mb-3">
          <label className="form-label">Estrato </label>
          <input
            className="form-control"
            name="estrato"
            type="number"
            min="1"
            max="6"
            value={manual.estrato}
            onChange={handleManualChange}
            required={modo === "datos" && esResidencial}
          />
        </div>
      )}
      <div className="col-md-6 mb-3">
        <label className="form-label">Consumo mensual (kWh)</label>
        <input
          className="form-control"
          name="consumo_kwh"
          type="number"
          min="0"
          step="1"
          value={manual.consumo_kwh}
          onChange={handleManualChange}
          required={modo === "datos"}
        />
      </div>
      <div className="col-md-6 mb-1">
        <label className="form-label">Valor kWh (COP) </label>
        <input
          className="form-control"
          name="valor_kwh"
          type="number"
          min="0"
          step="1"
          value={manual.valor_kwh}
          onChange={handleManualChange}
        />
      </div>
    </div>
  </>
)}

        <div className="row">
          <div className="col-md-6 mb-3">
            <label className="form-label">Estructura</label>
            <select className="form-select" value={estructura} onChange={(e) => setEstructura(e.target.value)}>
              <option value="madera">Madera</option>
              <option value="cercha">Cercha</option>
              <option value="granja">Granja</option>
              <option value="plancha">Plancha</option>
              <option value="perfil_metalico">Perfil Met√°lico</option>
            </select>
          </div>

          <div className="col-md-6 mb-3">
            <label className="form-label">Cubierta</label>
            <select className="form-select" value={cubierta} onChange={(e) => setCubierta(e.target.value)}>
              <option value="fibrocemento">Fibrocemento</option>
              <option value="teja_colonial">Teja Colonial</option>
              <option value="trapezoidal">Trapezoidal</option>
            </select>
          </div>

          <div className="col-md-6 mb-3">
            <label className="form-label">Ubicaci√≥n</label>
            <select className="form-select" value={ubicacion} onChange={(e) => setUbicacion(e.target.value)}>
              <option value="risaralda">Risaralda</option>
              <option value="quindio">Quind√≠o</option>
              <option value="valle">Valle</option>
              <option value="caldas">Caldas</option>
            </select>
          </div>

          <div className="col-md-6 mb-3">
            <label className="form-label">Tipo de sistema</label>
            <select className="form-select" value={tipoInversor} onChange={(e) => setTipoInversor(e.target.value)}>
              <option value="ongrid">On Grid</option>
              <option value="hibrido">H√≠brido</option>
            </select>
          </div>
        </div>

        {/* Slider de cobertura */}
        <div className="mb-3">
          <label className="form-label d-flex justify-content-between">
            <span>Cobertura de generaci√≥n</span>
            <span className="fw-bold">{porcentajeGeneracion}%</span>
          </label>
          <input
            type="range"
            className="form-range"
            min="50"
            max="200"
            step="50"
            value={porcentajeGeneracion}
            onChange={(e) => setPorcentajeGeneracion(parseInt(e.target.value, 10))}
          />
          <div className="d-flex justify-content-between small text-muted mt-1">
            <span>50%</span><span>100%</span><span>150%</span><span>200%</span>
          </div>
        </div>

        <button type="submit" className="btn custom-cotizador-btn w-100" disabled={loading}>
          {loading ? <>Procesando... <span className="loader"></span></> : "Calcular"}
        </button>
      </form>

      {error && <div className="alert alert-danger" data-aos="fade-right">{error}</div>}

      {resultado && (
        <div className="card shadow-lg p-4 mt-4 border-0" data-aos="fade-up">
          <h4 className="text-center mb-4 text-primary fw-bold">Resultados de la Cotizaci√≥n</h4>
          <div className="table-responsive">
            <table className="table table-bordered align-middle">
              <thead className="table-primary text-center">
                <tr><th>Par√°metro</th><th>Valor</th></tr>
              </thead>
              <tbody>
                <tr><td>üë§ Nombre</td><td>{resultado.nombre}</td></tr>
                <tr><td>üè† Direcci√≥n</td><td>{resultado.direccion}</td></tr>
                <tr><td>üìç Municipio</td><td>{resultado.municipio}</td></tr>
                <tr><td>üèòÔ∏è Estrato</td><td>{resultado.estrato}</td></tr>
                <tr><td>üîå Tipo de servicio</td><td>{resultado.tipo_servicio}</td></tr>
                <tr><td>‚ö° Consumo mensual</td><td>{Number(resultado.consumo_kwh).toFixed(0)} kWh</td></tr>
                <tr className="table-success"><td>üì¶ N√∫mero de paneles</td><td>{resultado.numero_paneles}</td></tr>
                <tr className="table-success"><td>‚öôÔ∏è Inversor</td><td>{resultado.inversor_utilizado}</td></tr>
                <tr className="table-success">
                  <td>üí∞ Precio estimado</td>
                  <td>
              {resultado.precio_total?.toLocaleString("es-CO", {
                style: "currency",
                currency: "COP",
              })}
            </td>
          </tr>
          <tr>
            <td>üîÜ Generaci√≥n mensual</td>
            <td>
              {resultado.generacion_mensual_min && resultado.generacion_mensual_max
                ? `${(resultado.generacion_mensual_min ).toFixed(0)} ‚Äì ${(resultado.generacion_mensual_max ).toFixed(0)} kWh`
                : "N/D"}
            </td>
          </tr>
          <tr><td>üí° Cobertura</td><td>{resultado.porcentaje_generacion ?? porcentajeGeneracion}%</td></tr>
              </tbody>
            </table>
          </div>

          <div className="text-center mt-4">
            <button className="btn btn-primary px-4 shadow-sm" onClick={exportarPDF}>
              üìÑ Descargar PDF
            </button>
          </div>
        </div>
      )}
    </div>
  );
};

export default CotizadorFactura;
